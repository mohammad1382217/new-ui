/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
// import { incrementAsync } from './thunks'

const initialState: loginSliceState = {
  isShowErrorFalsyValue: false,
  isShowErrorAboveEightDigits: false,
  login: {
    nameAndFamily: "",
    username: "",
    password: "",
  },
  isLoggedIn: false,
  status: 'idle',
}

export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setIsShowErrorFalsyValue: (state, action: PayloadAction<boolean>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isShowErrorFalsyValue = action.payload;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    setIsShowErrorAboveEightDigits: (state, action: PayloadAction<boolean>) => {
      state.isShowErrorAboveEightDigits = action.payload;
    },
    setIsLoggedIn: (state) => {
      state.isLoggedIn = !state.isLoggedIn;
    },
    setLogin: (state: State, action: PayloadAction<ActionPayload>) => {
      const { key, value } = action.payload;
      state.login[key] = value;
    },
    setLoginReset: (state) => {
      state.login = initialState.login;
      state.isLoggedIn = initialState.isLoggedIn;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading'
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle'
    //     state.value += action.payload
    //   })
  },
})

/* Types */
export interface loginSliceState {
  isShowErrorFalsyValue: boolean
  isShowErrorAboveEightDigits: boolean
  isLoggedIn: boolean
  login: loginForm
  status: 'idle' | 'loading' | 'failed'
}

interface loginForm {
  nameAndFamily: string;
  username: string;
  password: string;
}

interface ActionPayload {
  key: string
  value: any
}

interface State {
  login: {
    [key: string]: any
  }
}
